{
  "header_comments": [
    "# Automatically generated by Simple_ROS_Configurator",
    "# Simple_ROS_Configurator: !SRC_LINK!",
    "# Generated via !GEN_METHOD!",
    "# ",
    "# License: CC BY 4.0",
    "# Get your copy at ",
    "#     https://creativecommons.org/licenses/by/4.0/"
  ],
  "imports": [
      {
          "from": "",
          "modules": [
              "rclpy"
          ]
      },
      {
          "from": "rclpy.node",
          "modules": [
              "Node"
          ]
      },
      {
          "from": "std_msgs.msg",
          "modules": [
              "String"
          ]
      }
  ],
  "class": {
    "head": "\n\nclass !CLASSNAME!(Node)",
    "init": {
      "head": "\n\n    def __init__(self):",
      "def": "\n        super().__init__('!CLASSNAME_LOWER!')\n        self.publisher_ = self.create_publisher(String, '!TOPIC!', 10)\n        timer_period = 2  # seconds\n        self.timer = self.create_timer(timer_period, self.timer_callback)\n        self.i = 0"
    },
    "callback": {
      "head": "\n\n    def timer_callback(self):",
      "def": "\n        msg = String()\n        msg.data = 'Hello World: %d' % self.i\n        self.publisher_.publish(msg)\n        self.get_logger().info('Publishing: \"%s\"' % msg.data)\n        self.i += 1"
    }
  },
  "main": "\n\ndef main(args=None):\n    rclpy.init(args=args)\n\n    minimal_publisher = MinimalPublisher()\n\n    rclpy.spin(minimal_publisher)\n\n    # Destroy the node explicitly\n    # (optional - otherwise it will be done automatically\n    # when the garbage collector destroys the node object)\n    minimal_publisher.destroy_node()\n    rclpy.shutdown()\n",
  "__name__": "\n\nif __name__ == '__main__':\n    main()\n"
}

