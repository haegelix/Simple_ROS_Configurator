# Automatically generated by Simple_ROS_Configurator
# Simple_ROS_Configurator: !SRC_LINK!
# Generated via !GEN_METHOD!
#
# License: CC BY 4.0
# Get your copy at
# https://creativecommons.org/licenses/by/4.0/

# system imports
import os
import sys

# ROS2-specific imports
import rclpy
import std_msgs.msg
from rclpy.node import Node
from std_msgs.msg import String

# import and "construct" neccessary types
from typing import Callable
from typing import TypeVar
MsgType = TypeVar('MsgType')

# import current dir to be able to directly import runner-classes
sys.path.append(os.path.dirname(os.path.abspath(__file__)))  # this line has to be above sub import!

# import sub_door as cb_module
# !INSERT_SUBSCRIBER_IMPORT_HERE!


class _Sub:
    """
    TODO doc
    """
    name: str
    msg_type: MsgType
    topic: str
    callback: Callable[[MsgType], None]

    def __init__(self, name: str, msg_type: MsgType, topic: str, callback: Callable[[MsgType], None]):
        """
        Init an instance of the Subscription/Publication class _Sub
        :param name: Name for this instance.
        :param msg_type: Type of message to be published / received.
        :param topic: Name of the topic to post / listen to.
        :param callback: Method to be called when message was received. Ignored if class is used as publisher.
        """
        self.name = name
        self.msg_type = msg_type
        self.topic = topic
        self.callback = callback


sub: _Sub

sub = _Sub("node_name", std_msgs.msg.Empty, "topic", print)
# !INSERT_SUBSCRIBER_DECLARATION_HERE!


class Subscriber(Node):

    def __init__(self, sub: _Sub):
        super().__init__(sub.name)
        self.subscription = self.create_subscription(
            sub.msg_type,
            sub.topic,
            sub.callback,
            10)
        self.subscription  # prevent unused variable warning


def main(args=None):
    rclpy.init(args=args)
    minimal_subscriber = Subscriber(sub)

    # initialise subscriber if it has that function, else ignore
    try:
        cb_module.init()
    except NameError:
        pass

    rclpy.spin(minimal_subscriber)
    minimal_subscriber.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
